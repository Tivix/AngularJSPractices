'use strict';

// Okay, this is different from what Yeoman sets up by default.
// We are going to assign the controller to a variable so that we
// can later assign methods to it.  Calling the controller method
// of the module `angular.module('angularJspracticesApp')` is
// sufficient to register the controller and make it available to
// routes.
var AboutCtrl = angular.module('angularJspracticesApp')
  .controller('AboutCtrl', function ($scope, $route, $routeParams, Request) {
  	// Since the data we resolved loaded by the route service, we 
  	// need to retrieve it and hand it off to the $scope service, 
  	// which exposes it to the template.
  	$scope.names = $route.current.locals.names;
  	// Now, let's check and see if the who variable is set as part
  	// of the route.  The $routeParams service will give us insight
    // into this.  Check out app.js for more info on how to setup
    // route parameters.
  	$scope.who = $routeParams['who'] || "";
    // If we're looking someone up, let's get a picture of them.
    // Google can help us out, right?
    if($scope.who != ""){
      // Let's query google and handle the promise.
      var myPromise = Request.jsonp({
        url: 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&q='+$scope.who,
        method: 'GET'
      });
      // The query has been sent, and sometime later it will be 
      // fulfilled.  Let's define what happens when that is the case.
      // The then method takes two arguments: a function to call when
      // the promise is fulfilled and one to call when it's rejected.
      myPromise.then(function(data){
        $scope.photo = data.responseData.results[0].tbUrl;
      },function(data){
        $scope.error = "Well, it looks like there's been a problem.  Sorry about that.";
      });
    }
    //http://ajax.googleapis.com/ajax/services/search/images?v=1.0&q=
  });

// Now, let's define a method against the controller.  This method
// will be exposed to other parts of the app/module.  In this
// instance, we want to expose it to app.js and the $routeProvider
// service.  This is because we are going to configure the /about
// route to resolve some data before the route change is complete.
// The method returns the promise generated by the Request service
// which will resolve once it's fetched sample1.json from the
// server.
AboutCtrl.loadData = function(Request){
  return Request.sync({
    url: '/scripts/data/sample1.json',
    method: 'GET'
  });
};
